<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//8vAIWB9wDQz5AH09WcBcHBmwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD7/IYA//99ALC3kg9vcqI1SEqxbzM2uLM2PZanUniAWYSRjx73uLsCzaaoAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAZ2jHAG9vyQtTV7t2Nz3CxiEl0e4SFt7+CQvc/wcco/8SgJD7IoCA2Tl8
        e5RWgHxHmJyiF//b/wHSvvkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/pqNAP+hlQPfkYgJyJOMDMeZlA//olYGT0bZJhkf4uMOFeb/DRPo/w0T6P8LDt3/BCWy/wO8
        6P8CvNX/BZ+x/x6KgvZkgTrSd4JKjXuCYDedlaYL////AOHL/gAAAAAAAAAAAAAAAAAAAAAAAAAAAPC7
        uQD///8AkZCPEV+Hh0hMi5CHOZOdqTCerb0urcDDNLbMyTCrvbs3hK+7FyTk9BEZ6f8RGej/ERjp/w4S
        3f8EJbL/BcTt/xbX2/8zzqH/WL9N/3erCP9ylQn/aoQW7G1+L790f0p1gYZuLLOlywcAAAAA/uD/AAAA
        AAAAAAAAv5+jBE+Bf1Qsf37GE42S9Qqotv8EvdP/Asrm/wjT8v8S2Pn/A9Lw/war2v8UMeX/FR3p/xQe
        6f8UHer/ERff/woaqe5HtnjCdMcm7YLCBv+FwgD/hMMC/4TCAf+DuQL/fKkF/3OTDf5sgxzmb383snh0
        UmKRh4Ub////AL7U3gBSiYlOGI6S7ASyxP8Bze3/Adf8/wLW/f8H1Pn2Bdj+6gXY/vgB2P//BMD8/xY5
        7P8YIun/GCPq/xci6f8UHN//DxGX7FZlKnt7ohdigr8MjIPEBsyDwgP2g8IB/4PDAf+ExAL/hcMB/4S5
        A/+Anwn/gV0X/HZEKs92XlJJ////AC2suWUFyOf7Adj//wHX//8A1v//A8fo/xGvxuc5nIygLLa5ew7V
        9Zswsr3WIjje/Rsm6/8bJ+v/Gibr/xUf4v8XH4r/Y4UR/GaCCuBhdxWrZn4fdHqkF26Ewgqeg8UE2oi7
        B/mRpxH/nZId/6p+Kf+xbC7/nlgk/3tJK8+IeXQbJdz4NQjY/uAB1v//ANb//wLX/f8L1Oj/I8mx/2Gh
        LfxrgQbeZHcUpV9sUIkmM9/uHizr/x4s6v8dK+r/GCPi/xoliv93sA3/gbsB/3urA/90kQr6cEkS12cy
        Fp5yYR6AjnMrqaZpMveyajL/smoy/7JrMv+zbDP/qWgz0ppyVBl+8fgBGNv9RgvX/L0g0srzR8x7/2fH
        PP98xBL/hMIE/4G5A/93pQH/YYMl+yo71P4hMO3/ITDr/yEv7P8bJ+T/GiaK/3qsEf+OsQz/mZwY/6aE
        JP+pZyn/mlQf/5BMG/uXVyT1p2Qu/bNsM/+yazL/smsy/7JsM/qzcTuKwJBuBGzs6AAAumsAPdzoDnTJ
        Q0KKwwuOiMIG0oTCA/iDwgL/g8IC/4TEAP92riH/L0XR/yQ17P8kNer/JDTs/x4s4f8QFZ3kh301iq91
        ML+yazTss2oy+7JrM/+0bTP/tGwy/7VuM/+zbDP/smsz/LJsM+yxbTa8s3I8YbeATg22dkAAAAAAAAAA
        AAAAAAAAq9FcAL/YgwGTyC4XisUYUIbDD52FwgndhMMB+3muIf8zStH/Jznt/yc57P8nOO3/IjDh/wgJ
        p9UAAJYVuX5ZDZVoaUGdZltmsG9AdLdwM36zbTWGsmw0hLNuOHWxbzxXsnI+MLF7TgyoQAAAuqKJAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgz0EAqNNQA5LJJiCNxBNchotErDhG2fgqPu3/Kz7s/yo9
        7P8lNeL/CAmn1CctxC8xQOuSKDnuySY38M0pNueqHiS9TyAhlAQjJ6sAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wD/AEpZ5gBQWOIjM0fs4i5D
        7f8uQu3/LUHt/yc54v8JCqfSLzrWTy0/7PEpPOz/KTvs/yk67P8eJ8jxGRadVwAAmABpaKoAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASV3rAEld
        6yA2TO3hMUjt/zFG7f8wRu7/Kz7k/woKp9IwO9dPMETt8S1B7P8sQOz/LD/s/yU13v8SFKa7NCyXCzUw
        pAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABMYOwAS2DsIDpQ7uA2TO3/NUvt/zRL7f8uQuP/Cgun0jE+108zSe7xMEbu/y9E7f8vRO3/LEDp/xUb
        tecgHZ8pIyCmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAE5j7ABNY+0gPlTu4DpP7v86Tu//OU/v/zFG5P8LDKjSM0HWTjdM7vE0Se3/Mknt/zJI
        7f8yR+3/HyzD9R0grUAZHa8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAUWftAFBn7R9BWO/gPlTv/z5U7v89VO7/NUrk/wsMp9I0Q9ZPPFDv8ThN
        7v83TO7/N0zu/zhM7f8sPs73Lji+RCcyvwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVbO8AVGzvH0Rc8N9BWfD/QVfv/0BW8f85Tef/DA2o0jVE
        1lA/Ve/yPVPu/z1S7v87UO7/PlTt/ztS2PA9Ssw1PEvOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFdv8QBWbvEfR2Hx30Re7/9EXe//Q1zw/zxS
        5v8MDajSOEjXUENa8PJAV/D/P1Xw/z1U7/9JZO7/TWji01Fk2xdVad0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWXPwAFhy8B9KZfDfR2Lw/0dh
        8f9HYfH/P1bn/w4OqNI7TtlcRV7v9kNc7/9CWu//Q1zw/1Jy7/9VdeyF//8AAHGM6gAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcd+8AW3bvHk1q
        799KZ+//Smbw/0pm8f9GYez/Lj3K6Ede6cVHYvD/RmDw/0di8P9JZ+r/T23lwV976B9aeOcAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF15
        8QBdefEeUG3x305r8f9Oa/H/TWnx/0xp8P9MafD/S2jw/0tn8f9HZOz/Q17h90Vd26dUad4lNU7aAIOT
        3gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAX33xAF988R5TcvHeUXHw/1Jx8v9Rb/P/T23y/0po7f9DXuT/PFPZ7jlM0LU8Tc1WTV3TDA8n
        zQD//9cA///XAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABigPIAYoDyHlV18d5Pb+z/RmLk/zxT2fozRM7jLDvEtik2vnguOL42QD7ECh4w
        zQCIa6gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGB95wBlg+sSPlPOpigyucAeJK+KGh2oUx0ZoyQqGpYIAAD3AHpG
        hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAi04YAAAA/wAiGIYKIRKIC1wUWABCFGkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////5////wD///wAH/+AAAf8AAAA8AAAADAAAAAQAA
        AAAAAAAAAAAAAMAAAAHwAAAH/gAA///AAP//wAB//8AAf//AAH//wAB//8AAf//AAH//wAD//8AA///A
        Af//wAP//8AP///Af///5/////////////8=
</value>
  </data>
</root>